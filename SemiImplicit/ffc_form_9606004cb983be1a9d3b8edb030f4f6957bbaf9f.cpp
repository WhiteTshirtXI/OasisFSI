// This code conforms with the UFC specification version 2016.1.0
// and was automatically generated by FFC version 2016.1.0.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False

#include "ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0: public ufc::finite_element
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', triangle, 1)";
}

ufc::shape ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::space_dimension() const
{
    return 3;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::value_size() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::degree() const
{
    return 1;
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::family() const
{
    return "Lagrange";
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1: public ufc::finite_element
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::shape ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::value_size() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::degree() const
{
    return 1;
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::family() const
{
    return "Lagrange";
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[0];
    dof_coordinates[7] = coordinate_dofs[1];
    dof_coordinates[8] = coordinate_dofs[2];
    dof_coordinates[9] = coordinate_dofs[3];
    dof_coordinates[10] = coordinate_dofs[4];
    dof_coordinates[11] = coordinate_dofs[5];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2: public ufc::finite_element
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', triangle, 2)";
}

ufc::shape ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::space_dimension() const
{
    return 6;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::value_size() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::degree() const
{
    return 2;
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::family() const
{
    return "Lagrange";
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 6; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 6; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3: public ufc::finite_element
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
}

ufc::shape ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::space_dimension() const
{
    return 12;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::value_rank() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::value_size() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::reference_value_size() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::degree() const
{
    return 2;
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::family() const
{
    return "Lagrange";
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[8];
    for (unsigned int r = 0; r < 8; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[19] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[20] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[21] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[22] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[23] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_2();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4: public ufc::finite_element
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::signature() const
{
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
}

ufc::shape ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::space_dimension() const
{
    return 27;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::value_rank() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::value_size() const
{
    return 5;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::reference_value_rank() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::reference_value_dimension(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return 5;
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::reference_value_size() const
{
    return 5;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::degree() const
{
    return 2;
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::family() const
{
    return "Mixed";
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 17:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 18:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, -0.173205080756888, -0.1, 0.121716123890037, 0.0942809041582064, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 19:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.173205080756888, -0.1, 0.121716123890037, -0.0942809041582063, 0.0544331053951818};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 20:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.0, 0.0, 0.2, 0.0, 0.0, 0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 21:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.23094010767585, 0.133333333333333, 0.0, 0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 22:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791031, -0.23094010767585, 0.133333333333333, 0.0, -0.188561808316413, -0.163299316185545};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 23:
      {
        
      // Array of basisvalues
      double basisvalues[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      double tmp1 = (1.0 - Y)/2.0;
      double tmp2 = tmp1*tmp1;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[3] = basisvalues[1]*1.5*tmp0 - basisvalues[0]*0.5*tmp2;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[4] = basisvalues[1]*(1.5 + 2.5*Y);
      basisvalues[5] = basisvalues[2]*(0.111111111111111 + Y*1.66666666666667) - basisvalues[0]*0.555555555555556;
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[5] *= std::sqrt(1.5);
      basisvalues[1] *= std::sqrt(3.0);
      basisvalues[4] *= std::sqrt(4.5);
      basisvalues[3] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[6] = \
      {0.471404520791032, 0.0, -0.266666666666667, -0.243432247780074, 0.0, 0.0544331053951817};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 6; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 24:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 25:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 26:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 27; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5; s++)
      {
        values[r*5 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 27; r++)
    {
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[20];
    for (unsigned int r = 0; r < 20; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 27; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 5*num_derivatives; s++)
      {
        values[r*5*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

double ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 9:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 10:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 11:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 12:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 13:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 14:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 15:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 16:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 17:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 18:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 19:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 20:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 21:
      {
        y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 22:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 23:
      {
        y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
      y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[3];
        break;
      }
    case 24:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 25:
      {
        y[0] = coordinate_dofs[2];
      y[1] = coordinate_dofs[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 26:
      {
        y[0] = coordinate_dofs[4];
      y[1] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[5];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[18] = vals[3];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[19] = vals[3];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[3];
    y[0] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[3];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[22] = vals[3];
    y[0] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    y[1] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[23] = vals[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[24] = vals[4];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[25] = vals[4];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[26] = vals[4];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[5] = dof_values[1];
    vertex_values[10] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[6] = dof_values[7];
    vertex_values[11] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[7] = dof_values[13];
    vertex_values[12] = dof_values[14];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[18];
    vertex_values[8] = dof_values[19];
    vertex_values[13] = dof_values[20];
    // Evaluate function and change variables
    vertex_values[4] = dof_values[24];
    vertex_values[9] = dof_values[25];
    vertex_values[14] = dof_values[26];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[7] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[8] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[9] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[10] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[11] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[19] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[20] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[21] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[22] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[23] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[31] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[32] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[33] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[34] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[35] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[36] = coordinate_dofs[0];
    dof_coordinates[37] = coordinate_dofs[1];
    dof_coordinates[38] = coordinate_dofs[2];
    dof_coordinates[39] = coordinate_dofs[3];
    dof_coordinates[40] = coordinate_dofs[4];
    dof_coordinates[41] = coordinate_dofs[5];
    dof_coordinates[42] = 0.5*coordinate_dofs[2] + 0.5*coordinate_dofs[4];
    dof_coordinates[43] = 0.5*coordinate_dofs[3] + 0.5*coordinate_dofs[5];
    dof_coordinates[44] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[4];
    dof_coordinates[45] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[5];
    dof_coordinates[46] = 0.5*coordinate_dofs[0] + 0.5*coordinate_dofs[2];
    dof_coordinates[47] = 0.5*coordinate_dofs[1] + 0.5*coordinate_dofs[3];
    dof_coordinates[48] = coordinate_dofs[0];
    dof_coordinates[49] = coordinate_dofs[1];
    dof_coordinates[50] = coordinate_dofs[2];
    dof_coordinates[51] = coordinate_dofs[3];
    dof_coordinates[52] = coordinate_dofs[4];
    dof_coordinates[53] = coordinate_dofs[5];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_3();
        break;
      }
    case 2:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_0();
        break;
      }
    }
    
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5: public ufc::finite_element
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5() override;

  const char * signature() const final override;

  ufc::shape cell_shape() const final override;

  std::size_t topological_dimension() const final override;

  std::size_t geometric_dimension() const final override;

  std::size_t space_dimension() const final override;

  std::size_t value_rank() const final override;

  std::size_t value_dimension(std::size_t i) const final override;

  std::size_t value_size() const final override;

  std::size_t reference_value_rank() const final override;

  std::size_t reference_value_dimension(std::size_t i) const final override;

  std::size_t reference_value_size() const final override;

  std::size_t degree() const final override;

  const char * family() const final override;

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation);

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation);

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation);

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation);

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override;

  void evaluate_dofs(double * values,
                     const ufc::function& f,
                     const double * coordinate_dofs,
                     int cell_orientation,
                     const ufc::cell& c) const final override;

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override;

  void tabulate_dof_coordinates(double * coordinates,
                                const double * coordinate_dofs) const final override;

  std::size_t num_sub_elements() const final override;

  ufc::finite_element * create_sub_element(std::size_t i) const final override;

  ufc::finite_element * create() const final override;

};

extern "C" DLL_EXPORT ufc::finite_element * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5() : ufc::finite_element()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::signature() const
{
    return "FiniteElement('Real', triangle, 0)";
}

ufc::shape ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::geometric_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::space_dimension() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::value_rank() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::value_size() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::reference_value_rank() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::reference_value_size() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::degree() const
{
    return 0;
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::family() const
{
    return "Real";
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::_evaluate_basis(std::size_t i,
                                    double * values,
                                    const double * x,
                                    const double * coordinate_dofs,
                                    int cell_orientation)
{
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::_evaluate_basis_all(double * values,
                                        const double * x,
                                        const double * coordinate_dofs,
                                        int cell_orientation)
{
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double * values,
                                                const double * x,
                                                const double * coordinate_dofs,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double * values,
                                                    const double * x,
                                                    const double * coordinate_dofs,
                                                    int cell_orientation)
{
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
}

double ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs) const
{
    dof_coordinates[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[4];
    dof_coordinates[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[5];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::create_sub_element(std::size_t i) const
{
    return 0;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0: public ufc::dofmap
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::num_element_dofs() const
{
    return 3;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::num_facet_dofs() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1: public ufc::dofmap
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::num_facet_dofs() const
{
    return 4;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 5;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2: public ufc::dofmap
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + num_global_entities[1];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::num_element_dofs() const
{
    return 6;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::num_facet_dofs() const
{
    return 3;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3: public ufc::dofmap
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2*num_global_entities[0] + 2*num_global_entities[1];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::num_element_dofs() const
{
    return 12;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::num_facet_dofs() const
{
    return 6;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_2();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4: public ufc::dofmap
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::signature() const
{
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 5*num_global_entities[0] + 4*num_global_entities[1];
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::num_element_dofs() const
{
    return 27;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::num_facet_dofs() const
{
    return 14;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 5;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[15] = offset + entity_indices[1][0];
    dofs[16] = offset + entity_indices[1][1];
    dofs[17] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[18] = offset + entity_indices[0][0];
    dofs[19] = offset + entity_indices[0][1];
    dofs[20] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[21] = offset + entity_indices[1][0];
    dofs[22] = offset + entity_indices[1][1];
    dofs[23] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[24] = offset + entity_indices[0][0];
    dofs[25] = offset + entity_indices[0][1];
    dofs[26] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 7;
      dofs[4] = 8;
      dofs[5] = 9;
      dofs[6] = 13;
      dofs[7] = 14;
      dofs[8] = 15;
      dofs[9] = 19;
      dofs[10] = 20;
      dofs[11] = 21;
      dofs[12] = 25;
      dofs[13] = 26;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 4;
      dofs[3] = 6;
      dofs[4] = 8;
      dofs[5] = 10;
      dofs[6] = 12;
      dofs[7] = 14;
      dofs[8] = 16;
      dofs[9] = 18;
      dofs[10] = 20;
      dofs[11] = 22;
      dofs[12] = 24;
      dofs[13] = 26;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 5;
      dofs[3] = 6;
      dofs[4] = 7;
      dofs[5] = 11;
      dofs[6] = 12;
      dofs[7] = 13;
      dofs[8] = 17;
      dofs[9] = 18;
      dofs[10] = 19;
      dofs[11] = 23;
      dofs[12] = 24;
      dofs[13] = 25;
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 6;
        dofs[2] = 12;
        dofs[3] = 18;
        dofs[4] = 24;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 7;
        dofs[2] = 13;
        dofs[3] = 19;
        dofs[4] = 25;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 8;
        dofs[2] = 14;
        dofs[3] = 20;
        dofs[4] = 26;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 9;
        dofs[2] = 15;
        dofs[3] = 21;
          break;
        }
      case 1:
        {
          dofs[0] = 4;
        dofs[1] = 10;
        dofs[2] = 16;
        dofs[3] = 22;
          break;
        }
      case 2:
        {
          dofs[0] = 5;
        dofs[1] = 11;
        dofs[2] = 17;
        dofs[3] = 23;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_3();
        break;
      }
    case 2:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_0();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5: public ufc::dofmap
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5() override;

  const char * signature() const final override;

  bool needs_mesh_entities(std::size_t d) const final override;

  std::size_t topological_dimension() const final override;

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override;

  std::size_t num_element_dofs() const final override;

  std::size_t num_facet_dofs() const final override;

  std::size_t num_entity_dofs(std::size_t d) const final override;

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override;

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override;

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override;

  std::size_t num_sub_dofmaps() const final override;

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override;

  ufc::dofmap * create() const final override;

};

extern "C" DLL_EXPORT ufc::dofmap * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5() : ufc::dofmap()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::signature() const
{
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::topological_dimension() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::num_element_dofs() const
{
    return 1;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::num_facet_dofs() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = 0;
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
}

void ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::tabulate_entity_dofs(std::size_t * dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5::create() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5();
}


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_cell_integral_0_1: public ufc::cell_integral
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_cell_integral_0_1() : ufc::cell_integral()
  {
    
  }

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_cell_integral_0_1() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, true, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W49[49] = {0.0036234660797264, 0.00715464377909735, 0.00824760301353097, 0.00693554275373524, 0.00429791008798315, 0.00177448507143835, 0.000337590756711431, 0.00782718664849641, 0.0154550176627367, 0.0178159604006788, 0.0149817292193919, 0.0092840787568901, 0.00383313257348533, 0.000729242610651687, 0.0106850106013168, 0.021097877818156, 0.0243208363749012, 0.0204517846225132, 0.0126738360020949, 0.00523266711568851, 0.000995500091625133, 0.0116960367644213, 0.0230941796709132, 0.0266220977213878, 0.0223869525046108, 0.0138730467715663, 0.00572778720065371, 0.00108969528483177, 0.0106850106013168, 0.021097877818156, 0.0243208363749012, 0.0204517846225133, 0.0126738360020949, 0.00523266711568852, 0.000995500091625133, 0.00782718664849641, 0.0154550176627367, 0.0178159604006788, 0.0149817292193919, 0.0092840787568901, 0.00383313257348533, 0.000729242610651687, 0.00362346607972641, 0.00715464377909737, 0.00824760301353099, 0.00693554275373526, 0.00429791008798316, 0.00177448507143835, 0.000337590756711432};
    // Quadrature points on the UFC reference element: (0.0248740323760607, 0.0224793864387125), (0.0225279156156636, 0.114679053160904), (0.0186827443488427, 0.265789822784589), (0.0139228951565961, 0.452846373669445), (0.00897290400671669, 0.64737528288683), (0.00458641254163789, 0.819759308263108), (0.00143165958133296, 0.943737439463078), (0.126329297019669, 0.0224793864387125), (0.114413927746761, 0.114679053160904), (0.0948852170128628, 0.265789822784589), (0.0707110745463253, 0.452846373669445), (0.045571246280295, 0.64737528288683), (0.0232932989499898, 0.819759308263108), (0.00727105865856026, 0.943737439463078), (0.29039930608799, 0.0224793864387125), (0.263008866575801, 0.114679053160904), (0.218117268350298, 0.265789822784589), (0.16254699001287, 0.452846373669445), (0.104756842708482, 0.64737528288683), (0.0535454404572833, 0.819759308263108), (0.0167143365694675, 0.943737439463078), (0.488760306780644, 0.0224793864387125), (0.442660473419548, 0.114679053160904), (0.367105088607705, 0.265789822784589), (0.273576813165278, 0.452846373669445), (0.176312358556585, 0.64737528288683), (0.0901203458684462, 0.819759308263108), (0.0281312802684611, 0.943737439463078), (0.687121307473297, 0.0224793864387125), (0.622312080263294, 0.114679053160904), (0.516092908865112, 0.265789822784589), (0.384606636317686, 0.452846373669445), (0.247867874404688, 0.64737528288683), (0.126695251279609, 0.819759308263108), (0.0395482239674546, 0.943737439463078), (0.851191316541618, 0.0224793864387125), (0.770907019092334, 0.114679053160904), (0.639324960202548, 0.265789822784589), (0.47644255178423, 0.452846373669445), (0.307053470832875, 0.64737528288683), (0.156947392786903, 0.819759308263108), (0.0489915018783619, 0.943737439463078), (0.952646581185227, 0.0224793864387125), (0.862793031223432, 0.114679053160904), (0.715527432866568, 0.265789822784589), (0.533230731173959, 0.452846373669445), (0.343651813106453, 0.64737528288683), (0.175654279195255, 0.819759308263108), (0.0548309009555892, 0.943737439463078)
    
    // Values of basis functions at quadrature points.
    static const double FE0_C0_D01[49][27] = \
    {{-2.81058632474091, 0.0, -0.910082454245151, 0.0994961295042336, 3.72066877898606, -0.0994961295042411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.45117212489373, 0.0, -0.541283787356383, 0.0901116624626443, 2.99245591225012, -0.0901116624626526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86210973146628, 0.0, 0.0631592911383588, 0.0747309773953607, 1.79895044032792, -0.0747309773953701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263726, 0.321537430018067, -0.0556915806263836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268535, -1.2148938791215, -0.0358916160268654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665367, -2.5764201162714, -0.018345650166549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531584, -3.55562615402995, -0.00572663832532805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.40476526616648, 0.0, -0.91008245424515, 0.505317188078667, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.08362807636934, 0.0, -0.541283787356383, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.5572998408102, 0.0, 0.0631592911383591, 0.379540868051441, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.905770207136926, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591503, -0.282844298185301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.228213883331504, 0.0, 1.58950113154732, 0.182284985121166, -1.36128724821581, -0.182284985121179, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.372210428852385, 0.0, 2.27903723305243, 0.0931731957999442, -2.65124766190481, -0.0931731957999566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.804033992486548, 0.0, 2.77494975785231, 0.029084234634225, -3.57898375033886, -0.0290842346342374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.74848522989319, 0.0, -0.91008245424515, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.06437163546045, 0.0, 0.0631592911383592, 0.872469073401182, 1.0012123443221, -0.872469073401194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00852850238124297, 0.0, 1.58950113154732, 0.419027370833913, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.493218994881558, 0.0, 2.27903723305243, 0.214181761829118, -2.77225622793399, -0.214181761829131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.841807104130177, 0.0, 2.77494975785231, 0.0668573462778541, -3.61675686198248, -0.0668573462778664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.955041227122579, 0.0, -0.91008245424515, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292473, -1.46842035443082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0943072526611157, 0.0, 0.81138549467778, 1.0943072526611, -0.717078242016658, -1.09430725266111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.294750565773655, 0.0, 1.58950113154732, 0.705249434226325, -1.88425169732097, -0.705249434226339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.63951861652621, 0.0, 2.27903723305243, 0.360481383473769, -2.91855584957864, -0.360481383473782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.887474878926151, 0.0, 2.77494975785231, 0.112525121073828, -3.66242463677846, -0.112525121073841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.161597224351966, 0.0, -0.91008245424515, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.349812039948516, 0.0, 0.811385494677781, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.580972629166068, 0.0, 1.58950113154732, 0.991471497618737, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.785818238170862, 0.0, 2.27903723305243, 0.506781005118421, -3.06485547122329, -0.506781005118434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.933142653722125, 0.0, 2.77494975785231, 0.158192895869802, -3.70809241157443, -0.158192895869815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.494682811921319, 0.0, -0.91008245424515, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165656013, -3.08362807636934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.620459131948544, 0.0, 0.0631592911383594, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.717155701814694, 0.0, 0.811385494677781, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.906826804200036, 0.0, 2.27903723305243, 0.627789571147594, -3.18586403725246, -0.627789571147608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.970915765365754, 0.0, 2.77494975785231, 0.195966007513431, -3.74586552321806, -0.195966007513444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.900503870495752, 0.0, -0.910082454245151, 3.81058632474089, 0.00957858374940557, -3.81058632474091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.368604550180949, -3.45117212489373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.925269022604624, 0.0, 0.0631592911383592, 2.86210973146626, -0.988428313742975, -2.86210973146627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.94430841937361, 0.0, 0.811385494677781, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.981654349833443, 0.0, 2.27903723305243, 0.702617116781002, -3.26069158288587, -0.702617116781016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994273361674663, 0.0, 2.77494975785231, 0.21932360382234, -3.76922311952697, -0.219323603822353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C0_D10[49][27] = \
    {{-2.81058632474091, -0.900503870495761, 0.0, 0.0899175457548484, -0.0899175457548484, 3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.45117212489373, -0.909888337537349, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.86210973146627, -0.925269022604632, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.13292292469584, -0.944308419373617, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.374607252425813, -0.964108383973133, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.297382883218982, -0.981654349833449, 0.0, 3.27903723305243, -3.27903723305243, 0.684271466614468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.780676396177643, -0.994273361674668, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.40476526616647, -0.494682811921326, 0.0, 0.0899175457548484, -0.0899175457548484, 2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.6259723653823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.228213883331499, -0.81771501487882, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.372210428852389, -0.906826804200041, 0.0, 3.27903723305243, -3.27903723305243, 0.534616375347652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.804033992486552, -0.970915765365759, 0.0, 3.7749497578523, -3.7749497578523, 0.166881772879207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548482, -0.0899175457548482, 1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.48924832105318, 0.0520354663032028, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.00852850238124803, -0.580972629166073, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.493218994881564, -0.785818238170867, 0.0, 3.27903723305243, -3.27903723305243, 0.292599243289304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.841807104130181, -0.93314265372213, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.955041227122573, 0.955041227122573, 0.0, 0.0899175457548486, -0.0899175457548486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.77064189367819, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.46842035443082, 0.468420354430821, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0943072526611104, 0.0943072526611107, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.294750565773661, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.639518616526215, -0.639518616526215, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.887474878926155, -0.887474878926156, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.16159722435196, 1.74848522989319, 0.0, 0.0899175457548484, -0.0899175457548484, -1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0520354663032034, 1.48924832105318, 0.0, 0.458716212643616, -0.458716212643616, -1.43721285474997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.127530926598808, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.580972629166073, -0.00852850238124803, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.785818238170867, -0.493218994881564, 0.0, 3.27903723305243, -3.27903723305243, -0.292599243289303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.93314265372213, -0.841807104130182, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.494682811921325, 2.40476526616647, 0.0, 0.0899175457548488, -0.0899175457548488, -2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.542344289012956, 2.08362807636934, 0.0, 0.458716212643616, -0.458716212643616, -2.62597236538229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.62045913194855, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.7171557018147, 0.905770207136921, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.906826804200041, -0.37221042885239, 0.0, 3.27903723305243, -3.27903723305243, -0.534616375347651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.970915765365759, -0.804033992486552, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.900503870495759, 2.81058632474091, 0.0, 0.089917545754849, -0.089917545754849, -3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.909888337537347, 2.45117212489373, 0.0, 0.458716212643616, -0.458716212643616, -3.36106046243107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.92526902260463, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.944308419373616, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.981654349833449, -0.297382883218982, 0.0, 3.27903723305243, -3.27903723305243, -0.684271466614466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.994273361674668, -0.780676396177643, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D01[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, 0.0, -0.910082454245151, 0.0994961295042336, 3.72066877898606, -0.0994961295042411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, 0.0, -0.541283787356383, 0.0901116624626443, 2.99245591225012, -0.0901116624626526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146628, 0.0, 0.0631592911383588, 0.0747309773953607, 1.79895044032792, -0.0747309773953701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263726, 0.321537430018067, -0.0556915806263836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268535, -1.2148938791215, -0.0358916160268654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665367, -2.5764201162714, -0.018345650166549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531584, -3.55562615402995, -0.00572663832532805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616648, 0.0, -0.91008245424515, 0.505317188078667, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, 0.0, -0.541283787356383, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5572998408102, 0.0, 0.0631592911383591, 0.379540868051441, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136926, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591503, -0.282844298185301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331504, 0.0, 1.58950113154732, 0.182284985121166, -1.36128724821581, -0.182284985121179, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852385, 0.0, 2.27903723305243, 0.0931731957999442, -2.65124766190481, -0.0931731957999566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486548, 0.0, 2.77494975785231, 0.029084234634225, -3.57898375033886, -0.0290842346342374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.0, -0.91008245424515, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, 0.0, 0.0631592911383592, 0.872469073401182, 1.0012123443221, -0.872469073401194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124297, 0.0, 1.58950113154732, 0.419027370833913, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881558, 0.0, 2.27903723305243, 0.214181761829118, -2.77225622793399, -0.214181761829131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130177, 0.0, 2.77494975785231, 0.0668573462778541, -3.61675686198248, -0.0668573462778664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122579, 0.0, -0.91008245424515, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292473, -1.46842035443082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611157, 0.0, 0.81138549467778, 1.0943072526611, -0.717078242016658, -1.09430725266111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773655, 0.0, 1.58950113154732, 0.705249434226325, -1.88425169732097, -0.705249434226339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63951861652621, 0.0, 2.27903723305243, 0.360481383473769, -2.91855584957864, -0.360481383473782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926151, 0.0, 2.77494975785231, 0.112525121073828, -3.66242463677846, -0.112525121073841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351966, 0.0, -0.91008245424515, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948516, 0.0, 0.811385494677781, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166068, 0.0, 1.58950113154732, 0.991471497618737, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170862, 0.0, 2.27903723305243, 0.506781005118421, -3.06485547122329, -0.506781005118434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722125, 0.0, 2.77494975785231, 0.158192895869802, -3.70809241157443, -0.158192895869815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921319, 0.0, -0.91008245424515, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165656013, -3.08362807636934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948544, 0.0, 0.0631592911383594, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.717155701814694, 0.0, 0.811385494677781, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200036, 0.0, 2.27903723305243, 0.627789571147594, -3.18586403725246, -0.627789571147608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365754, 0.0, 2.77494975785231, 0.195966007513431, -3.74586552321806, -0.195966007513444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495752, 0.0, -0.910082454245151, 3.81058632474089, 0.00957858374940557, -3.81058632474091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.368604550180949, -3.45117212489373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604624, 0.0, 0.0631592911383592, 2.86210973146626, -0.988428313742975, -2.86210973146627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.94430841937361, 0.0, 0.811385494677781, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833443, 0.0, 2.27903723305243, 0.702617116781002, -3.26069158288587, -0.702617116781016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674663, 0.0, 2.77494975785231, 0.21932360382234, -3.76922311952697, -0.219323603822353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C1_D10[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, -0.900503870495761, 0.0, 0.0899175457548484, -0.0899175457548484, 3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, -0.909888337537349, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146627, -0.925269022604632, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, -0.944308419373617, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425813, -0.964108383973133, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218982, -0.981654349833449, 0.0, 3.27903723305243, -3.27903723305243, 0.684271466614468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177643, -0.994273361674668, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616647, -0.494682811921326, 0.0, 0.0899175457548484, -0.0899175457548484, 2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.6259723653823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331499, -0.81771501487882, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852389, -0.906826804200041, 0.0, 3.27903723305243, -3.27903723305243, 0.534616375347652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486552, -0.970915765365759, 0.0, 3.7749497578523, -3.7749497578523, 0.166881772879207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548482, -0.0899175457548482, 1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0520354663032028, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124803, -0.580972629166073, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881564, -0.785818238170867, 0.0, 3.27903723305243, -3.27903723305243, 0.292599243289304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130181, -0.93314265372213, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122573, 0.955041227122573, 0.0, 0.0899175457548486, -0.0899175457548486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.77064189367819, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.46842035443082, 0.468420354430821, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611104, 0.0943072526611107, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773661, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639518616526215, -0.639518616526215, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926155, -0.887474878926156, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.16159722435196, 1.74848522989319, 0.0, 0.0899175457548484, -0.0899175457548484, -1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032034, 1.48924832105318, 0.0, 0.458716212643616, -0.458716212643616, -1.43721285474997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598808, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166073, -0.00852850238124803, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170867, -0.493218994881564, 0.0, 3.27903723305243, -3.27903723305243, -0.292599243289303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.93314265372213, -0.841807104130182, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921325, 2.40476526616647, 0.0, 0.0899175457548488, -0.0899175457548488, -2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542344289012956, 2.08362807636934, 0.0, 0.458716212643616, -0.458716212643616, -2.62597236538229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.62045913194855, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7171557018147, 0.905770207136921, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200041, -0.37221042885239, 0.0, 3.27903723305243, -3.27903723305243, -0.534616375347651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365759, -0.804033992486552, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495759, 2.81058632474091, 0.0, 0.089917545754849, -0.089917545754849, -3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.909888337537347, 2.45117212489373, 0.0, 0.458716212643616, -0.458716212643616, -3.36106046243107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.92526902260463, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373616, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833449, -0.297382883218982, 0.0, 3.27903723305243, -3.27903723305243, -0.684271466614466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674668, -0.780676396177643, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.862424436102575, -0.0236365974027701, -0.0214687408093905, 0.00223661194428193, 0.0856596425519241, 0.0947846476133796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.626030598232004, -0.0215129016516906, -0.0883764826931412, 0.0103339201299721, 0.395777151578119, 0.0777477144047362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.308431581502674, -0.0179846544760344, -0.124501362992862, 0.0198627332384349, 0.760719638316469, 0.0534720644113193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0354392941626713, -0.013535201137513, -0.0427066973783121, 0.0252197303305776, 0.965886411764936, 0.0296964622576404, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.107458675803748, -0.00881187799408919, 0.190814230898777, 0.0232353450786583, 0.889886758897448, 0.0123342189229534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113945427596046, -0.00454434218163366, 0.52425133870491, 0.0150390174901692, 0.575976921626226, 0.00322249195637403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0488180455563859, -0.0014275602830193, 0.837543269825575, 0.00540444298987974, 0.206983896285125, 0.000313996738824873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.597861998170089, -0.0944111144487016, -0.0214687408093905, 0.0113592203449441, 0.076537034151262, 0.430121602591797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.417688245079323, -0.0882328340218791, -0.0883764826931412, 0.0524835236096748, 0.353627548098416, 0.352809999927606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178147849273431, -0.0768788081977067, -0.124501362992862, 0.100878100058905, 0.679704271495999, 0.242649950362235, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0224475414828926, -0.0607109624193334, -0.0427066973783121, 0.128085014746293, 0.863021127349221, 0.134759059185025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118489802931845, -0.0414177693052164, 0.190814230898777, 0.118006793808845, 0.795115310167261, 0.0559712373621772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10768242458169, -0.0222081433980426, 0.52425133870491, 0.0763795945376375, 0.514636344578758, 0.0146232901584273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0441911673657668, -0.00716532207052778, 0.837543269825575, 0.0274478811224619, 0.184940458152543, 0.00142488033571431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25715007489433, -0.121735792135218, -0.0214687408093905, 0.0261119928923436, 0.0617842616038625, 0.798158203554072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.152232570219964, -0.124661538780826, -0.0883764826931412, 0.120646431167342, 0.285464640540749, 0.654694379545912, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0166108722965938, -0.122966982845106, -0.124501362992862, 0.231893400404338, 0.548688971150566, 0.450275101986471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0887621069184766, -0.109703942088382, -0.0427066973783121, 0.294435259912846, 0.696670882182667, 0.250066604289657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124990908080892, -0.0828088505199826, 0.190814230898777, 0.271267962730938, 0.641854141245168, 0.10386342372599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0945918778860025, -0.0478112120697543, 0.52425133870491, 0.175577492919624, 0.415438446196772, 0.0271358121344515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0364200999294946, -0.0161555984755526, 0.837543269825575, 0.0630957807855734, 0.149292558489432, 0.00264408930446702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0109870318120257, -0.0109870318120257, -0.0214687408093905, 0.0439481272481031, 0.043948127248103, 0.955546549937236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0507638839635113, -0.0507638839635114, -0.0883764826931412, 0.203055535854046, 0.203055535854045, 0.783793178912073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.097572796444363, -0.097572796444363, -0.124501362992862, 0.390291185777452, 0.390291185777452, 0.539064584326685, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123888267761939, -0.123888267761939, -0.0427066973783121, 0.495553071047757, 0.495553071047756, 0.299377090806677, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.114140262997013, -0.114140262997013, 0.190814230898777, 0.456561051988053, 0.456561051988053, 0.124344191119143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0738769923895494, -0.0738769923895495, 0.52425133870491, 0.295507969558198, 0.295507969558198, 0.0324867069577936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0265485424093756, -0.0265485424093756, 0.837543269825575, 0.106194169637503, 0.106194169637502, 0.003165475718171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.121735792135218, 0.25715007489433, -0.0214687408093905, 0.0617842616038626, 0.0261119928923434, 0.798158203554073, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124661538780826, 0.152232570219964, -0.0883764826931412, 0.285464640540749, 0.120646431167342, 0.654694379545913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.122966982845106, 0.0166108722965939, -0.124501362992862, 0.548688971150566, 0.231893400404338, 0.450275101986471, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109703942088382, -0.0887621069184766, -0.0427066973783121, 0.696670882182668, 0.294435259912846, 0.250066604289657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0828088505199825, -0.124990908080892, 0.190814230898777, 0.641854141245168, 0.271267962730938, 0.10386342372599, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0478112120697543, -0.0945918778860025, 0.52425133870491, 0.415438446196772, 0.175577492919624, 0.0271358121344515, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0161555984755526, -0.0364200999294947, 0.837543269825575, 0.149292558489432, 0.0630957807855733, 0.00264408930446702, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0944111144487016, 0.597861998170089, -0.0214687408093905, 0.0765370341512621, 0.0113592203449439, 0.430121602591797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.088232834021879, 0.417688245079323, -0.0883764826931412, 0.353627548098416, 0.0524835236096747, 0.352809999927606, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0768788081977065, 0.178147849273431, -0.124501362992862, 0.679704271496, 0.100878100058904, 0.242649950362234, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0607109624193332, -0.0224475414828926, -0.0427066973783121, 0.863021127349221, 0.128085014746293, 0.134759059185025, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0414177693052163, -0.118489802931845, 0.190814230898777, 0.795115310167261, 0.118006793808845, 0.0559712373621772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0222081433980425, -0.10768242458169, 0.52425133870491, 0.514636344578758, 0.0763795945376373, 0.0146232901584273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0071653220705277, -0.0441911673657668, 0.837543269825575, 0.184940458152543, 0.0274478811224618, 0.00142488033571431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0236365974027701, 0.862424436102575, -0.0214687408093905, 0.0856596425519242, 0.00223661194428185, 0.0947846476133799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0215129016516907, 0.626030598232004, -0.0883764826931412, 0.395777151578119, 0.0103339201299721, 0.0777477144047368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0179846544760342, 0.308431581502674, -0.124501362992862, 0.760719638316469, 0.0198627332384348, 0.0534720644113193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0135352011375129, 0.0354392941626711, -0.0427066973783121, 0.965886411764936, 0.0252197303305778, 0.0296964622576406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00881187799408908, -0.107458675803748, 0.190814230898777, 0.889886758897448, 0.0232353450786583, 0.0123342189229535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00454434218163358, -0.113945427596046, 0.52425133870491, 0.575976921626226, 0.0150390174901691, 0.00322249195637403, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00142756028301921, -0.0488180455563859, 0.837543269825575, 0.206983896285125, 0.00540444298987963, 0.000313996738824901, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2_D01[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, 0.0, -0.910082454245151, 0.0994961295042336, 3.72066877898606, -0.0994961295042411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, 0.0, -0.541283787356383, 0.0901116624626443, 2.99245591225012, -0.0901116624626526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146628, 0.0, 0.0631592911383588, 0.0747309773953607, 1.79895044032792, -0.0747309773953701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263726, 0.321537430018067, -0.0556915806263836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268535, -1.2148938791215, -0.0358916160268654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665367, -2.5764201162714, -0.018345650166549, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531584, -3.55562615402995, -0.00572663832532805, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616648, 0.0, -0.91008245424515, 0.505317188078667, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, 0.0, -0.541283787356383, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5572998408102, 0.0, 0.0631592911383591, 0.379540868051441, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136926, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591503, -0.282844298185301, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331504, 0.0, 1.58950113154732, 0.182284985121166, -1.36128724821581, -0.182284985121179, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852385, 0.0, 2.27903723305243, 0.0931731957999442, -2.65124766190481, -0.0931731957999566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486548, 0.0, 2.77494975785231, 0.029084234634225, -3.57898375033886, -0.0290842346342374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.0, -0.91008245424515, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, 0.0, 0.0631592911383592, 0.872469073401182, 1.0012123443221, -0.872469073401194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051479, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124297, 0.0, 1.58950113154732, 0.419027370833913, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881558, 0.0, 2.27903723305243, 0.214181761829118, -2.77225622793399, -0.214181761829131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130177, 0.0, 2.77494975785231, 0.0668573462778541, -3.61675686198248, -0.0668573462778664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122579, 0.0, -0.91008245424515, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292473, -1.46842035443082, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611157, 0.0, 0.81138549467778, 1.0943072526611, -0.717078242016658, -1.09430725266111, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773655, 0.0, 1.58950113154732, 0.705249434226325, -1.88425169732097, -0.705249434226339, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63951861652621, 0.0, 2.27903723305243, 0.360481383473769, -2.91855584957864, -0.360481383473782, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926151, 0.0, 2.77494975785231, 0.112525121073828, -3.66242463677846, -0.112525121073841, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351966, 0.0, -0.91008245424515, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948516, 0.0, 0.811385494677781, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166068, 0.0, 1.58950113154732, 0.991471497618737, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170862, 0.0, 2.27903723305243, 0.506781005118421, -3.06485547122329, -0.506781005118434, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722125, 0.0, 2.77494975785231, 0.158192895869802, -3.70809241157443, -0.158192895869815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921319, 0.0, -0.91008245424515, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165656013, -3.08362807636934, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948544, 0.0, 0.0631592911383594, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.717155701814694, 0.0, 0.811385494677781, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200036, 0.0, 2.27903723305243, 0.627789571147594, -3.18586403725246, -0.627789571147608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365754, 0.0, 2.77494975785231, 0.195966007513431, -3.74586552321806, -0.195966007513444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495752, 0.0, -0.910082454245151, 3.81058632474089, 0.00957858374940557, -3.81058632474091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.368604550180949, -3.45117212489373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604624, 0.0, 0.0631592911383592, 2.86210973146626, -0.988428313742975, -2.86210973146627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.94430841937361, 0.0, 0.811385494677781, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833443, 0.0, 2.27903723305243, 0.702617116781002, -3.26069158288587, -0.702617116781016, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674663, 0.0, 2.77494975785231, 0.21932360382234, -3.76922311952697, -0.219323603822353, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C2_D10[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, -0.900503870495761, 0.0, 0.0899175457548484, -0.0899175457548484, 3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, -0.909888337537349, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146627, -0.925269022604632, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, -0.944308419373617, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425813, -0.964108383973133, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218982, -0.981654349833449, 0.0, 3.27903723305243, -3.27903723305243, 0.684271466614468, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177643, -0.994273361674668, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616647, -0.494682811921326, 0.0, 0.0899175457548484, -0.0899175457548484, 2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.6259723653823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331499, -0.81771501487882, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852389, -0.906826804200041, 0.0, 3.27903723305243, -3.27903723305243, 0.534616375347652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486552, -0.970915765365759, 0.0, 3.7749497578523, -3.7749497578523, 0.166881772879207, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548482, -0.0899175457548482, 1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0520354663032028, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124803, -0.580972629166073, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881564, -0.785818238170867, 0.0, 3.27903723305243, -3.27903723305243, 0.292599243289304, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130181, -0.93314265372213, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122573, 0.955041227122573, 0.0, 0.0899175457548486, -0.0899175457548486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.77064189367819, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.46842035443082, 0.468420354430821, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611104, 0.0943072526611107, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773661, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639518616526215, -0.639518616526215, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926155, -0.887474878926156, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.16159722435196, 1.74848522989319, 0.0, 0.0899175457548484, -0.0899175457548484, -1.58688800554123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032034, 1.48924832105318, 0.0, 0.458716212643616, -0.458716212643616, -1.43721285474997, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598808, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166073, -0.00852850238124803, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170867, -0.493218994881564, 0.0, 3.27903723305243, -3.27903723305243, -0.292599243289303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.93314265372213, -0.841807104130182, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919476, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921325, 2.40476526616647, 0.0, 0.0899175457548488, -0.0899175457548488, -2.8994480780878, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542344289012956, 2.08362807636934, 0.0, 0.458716212643616, -0.458716212643616, -2.62597236538229, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.62045913194855, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7171557018147, 0.905770207136921, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200041, -0.37221042885239, 0.0, 3.27903723305243, -3.27903723305243, -0.534616375347651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365759, -0.804033992486552, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495759, 2.81058632474091, 0.0, 0.089917545754849, -0.089917545754849, -3.71109019523667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.909888337537347, 2.45117212489373, 0.0, 0.458716212643616, -0.458716212643616, -3.36106046243107, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.92526902260463, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373616, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833449, -0.297382883218982, 0.0, 3.27903723305243, -3.27903723305243, -0.684271466614466, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674668, -0.780676396177643, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.862424436102575, -0.0236365974027701, -0.0214687408093905, 0.00223661194428193, 0.0856596425519241, 0.0947846476133796, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.626030598232004, -0.0215129016516906, -0.0883764826931412, 0.0103339201299721, 0.395777151578119, 0.0777477144047362, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.308431581502674, -0.0179846544760344, -0.124501362992862, 0.0198627332384349, 0.760719638316469, 0.0534720644113193, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0354392941626713, -0.013535201137513, -0.0427066973783121, 0.0252197303305776, 0.965886411764936, 0.0296964622576404, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.107458675803748, -0.00881187799408919, 0.190814230898777, 0.0232353450786583, 0.889886758897448, 0.0123342189229534, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.113945427596046, -0.00454434218163366, 0.52425133870491, 0.0150390174901692, 0.575976921626226, 0.00322249195637403, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0488180455563859, -0.0014275602830193, 0.837543269825575, 0.00540444298987974, 0.206983896285125, 0.000313996738824873, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.597861998170089, -0.0944111144487016, -0.0214687408093905, 0.0113592203449441, 0.076537034151262, 0.430121602591797, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.417688245079323, -0.0882328340218791, -0.0883764826931412, 0.0524835236096748, 0.353627548098416, 0.352809999927606, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.178147849273431, -0.0768788081977067, -0.124501362992862, 0.100878100058905, 0.679704271495999, 0.242649950362235, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0224475414828926, -0.0607109624193334, -0.0427066973783121, 0.128085014746293, 0.863021127349221, 0.134759059185025, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.118489802931845, -0.0414177693052164, 0.190814230898777, 0.118006793808845, 0.795115310167261, 0.0559712373621772, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.10768242458169, -0.0222081433980426, 0.52425133870491, 0.0763795945376375, 0.514636344578758, 0.0146232901584273, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0441911673657668, -0.00716532207052778, 0.837543269825575, 0.0274478811224619, 0.184940458152543, 0.00142488033571431, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25715007489433, -0.121735792135218, -0.0214687408093905, 0.0261119928923436, 0.0617842616038625, 0.798158203554072, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.152232570219964, -0.124661538780826, -0.0883764826931412, 0.120646431167342, 0.285464640540749, 0.654694379545912, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0166108722965938, -0.122966982845106, -0.124501362992862, 0.231893400404338, 0.548688971150566, 0.450275101986471, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0887621069184766, -0.109703942088382, -0.0427066973783121, 0.294435259912846, 0.696670882182667, 0.250066604289657, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124990908080892, -0.0828088505199826, 0.190814230898777, 0.271267962730938, 0.641854141245168, 0.10386342372599, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0945918778860025, -0.0478112120697543, 0.52425133870491, 0.175577492919624, 0.415438446196772, 0.0271358121344515, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0364200999294946, -0.0161555984755526, 0.837543269825575, 0.0630957807855734, 0.149292558489432, 0.00264408930446702, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0109870318120257, -0.0109870318120257, -0.0214687408093905, 0.0439481272481031, 0.043948127248103, 0.955546549937236, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0507638839635113, -0.0507638839635114, -0.0883764826931412, 0.203055535854046, 0.203055535854045, 0.783793178912073, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.097572796444363, -0.097572796444363, -0.124501362992862, 0.390291185777452, 0.390291185777452, 0.539064584326685, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.123888267761939, -0.123888267761939, -0.0427066973783121, 0.495553071047757, 0.495553071047756, 0.299377090806677, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.114140262997013, -0.114140262997013, 0.190814230898777, 0.456561051988053, 0.456561051988053, 0.124344191119143, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0738769923895494, -0.0738769923895495, 0.52425133870491, 0.295507969558198, 0.295507969558198, 0.0324867069577936, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0265485424093756, -0.0265485424093756, 0.837543269825575, 0.106194169637503, 0.106194169637502, 0.003165475718171, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.121735792135218, 0.25715007489433, -0.0214687408093905, 0.0617842616038626, 0.0261119928923434, 0.798158203554073, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.124661538780826, 0.152232570219964, -0.0883764826931412, 0.285464640540749, 0.120646431167342, 0.654694379545913, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.122966982845106, 0.0166108722965939, -0.124501362992862, 0.548688971150566, 0.231893400404338, 0.450275101986471, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.109703942088382, -0.0887621069184766, -0.0427066973783121, 0.696670882182668, 0.294435259912846, 0.250066604289657, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0828088505199825, -0.124990908080892, 0.190814230898777, 0.641854141245168, 0.271267962730938, 0.10386342372599, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0478112120697543, -0.0945918778860025, 0.52425133870491, 0.415438446196772, 0.175577492919624, 0.0271358121344515, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0161555984755526, -0.0364200999294947, 0.837543269825575, 0.149292558489432, 0.0630957807855733, 0.00264408930446702, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0944111144487016, 0.597861998170089, -0.0214687408093905, 0.0765370341512621, 0.0113592203449439, 0.430121602591797, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.088232834021879, 0.417688245079323, -0.0883764826931412, 0.353627548098416, 0.0524835236096747, 0.352809999927606, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0768788081977065, 0.178147849273431, -0.124501362992862, 0.679704271496, 0.100878100058904, 0.242649950362234, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0607109624193332, -0.0224475414828926, -0.0427066973783121, 0.863021127349221, 0.128085014746293, 0.134759059185025, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0414177693052163, -0.118489802931845, 0.190814230898777, 0.795115310167261, 0.118006793808845, 0.0559712373621772, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0222081433980425, -0.10768242458169, 0.52425133870491, 0.514636344578758, 0.0763795945376373, 0.0146232901584273, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0071653220705277, -0.0441911673657668, 0.837543269825575, 0.184940458152543, 0.0274478811224618, 0.00142488033571431, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0236365974027701, 0.862424436102575, -0.0214687408093905, 0.0856596425519242, 0.00223661194428185, 0.0947846476133799, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0215129016516907, 0.626030598232004, -0.0883764826931412, 0.395777151578119, 0.0103339201299721, 0.0777477144047368, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0179846544760342, 0.308431581502674, -0.124501362992862, 0.760719638316469, 0.0198627332384348, 0.0534720644113193, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0135352011375129, 0.0354392941626711, -0.0427066973783121, 0.965886411764936, 0.0252197303305778, 0.0296964622576406, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00881187799408908, -0.107458675803748, 0.190814230898777, 0.889886758897448, 0.0232353450786583, 0.0123342189229535, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00454434218163358, -0.113945427596046, 0.52425133870491, 0.575976921626226, 0.0150390174901691, 0.00322249195637403, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00142756028301921, -0.0488180455563859, 0.837543269825575, 0.206983896285125, 0.00540444298987963, 0.000313996738824901, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3_D01[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, 0.0, -0.910082454245151, 0.0994961295042336, 3.72066877898606, -0.0994961295042411, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, 0.0, -0.541283787356383, 0.0901116624626443, 2.99245591225012, -0.0901116624626526, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146628, 0.0, 0.0631592911383588, 0.0747309773953607, 1.79895044032792, -0.0747309773953701, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, 0.0, 0.81138549467778, 0.0556915806263726, 0.321537430018067, -0.0556915806263836, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425817, 0.0, 1.58950113154732, 0.0358916160268535, -1.2148938791215, -0.0358916160268654, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218977, 0.0, 2.27903723305243, 0.0183456501665367, -2.5764201162714, -0.018345650166549, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177638, 0.0, 2.77494975785231, 0.00572663832531584, -3.55562615402995, -0.00572663832532805, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616648, 0.0, -0.91008245424515, 0.505317188078667, 3.31484772041163, -0.505317188078675, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, 0.0, -0.541283787356383, 0.457655710987035, 2.62491186372573, -0.457655710987044, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5572998408102, 0.0, 0.0631592911383591, 0.379540868051441, 1.49414054967184, -0.379540868051451, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136926, 0.0, 0.81138549467778, 0.282844298185289, 0.0943847124591503, -0.282844298185301, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331504, 0.0, 1.58950113154732, 0.182284985121166, -1.36128724821581, -0.182284985121179, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852385, 0.0, 2.27903723305243, 0.0931731957999442, -2.65124766190481, -0.0931731957999566, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486548, 0.0, 2.77494975785231, 0.029084234634225, -3.57898375033886, -0.0290842346342374, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.0, -0.91008245424515, 1.16159722435195, 2.65856768413835, -1.16159722435196, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0, -0.541283787356382, 1.05203546630319, 2.03053210840957, -1.0520354663032, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, 0.0, 0.0631592911383592, 0.872469073401182, 1.0012123443221, -0.872469073401194, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270748, 0.0, 0.81138549467778, 0.650187960051466, -0.272958949407027, -0.650187960051479, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124297, 0.0, 1.58950113154732, 0.419027370833913, -1.59802963392856, -0.419027370833926, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881558, 0.0, 2.27903723305243, 0.214181761829118, -2.77225622793399, -0.214181761829131, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130177, 0.0, 2.77494975785231, 0.0668573462778541, -3.61675686198248, -0.0668573462778664, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122579, 0.0, -0.91008245424515, 1.95504122712256, 1.86512368136773, -1.95504122712258, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.770641893678196, 0.0, -0.541283787356382, 1.77064189367818, 1.31192568103458, -1.77064189367819, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.468420354430826, 0.0, 0.0631592911383593, 1.46842035443081, 0.405261063292473, -1.46842035443082, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611157, 0.0, 0.81138549467778, 1.0943072526611, -0.717078242016658, -1.09430725266111, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773655, 0.0, 1.58950113154732, 0.705249434226325, -1.88425169732097, -0.705249434226339, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.63951861652621, 0.0, 2.27903723305243, 0.360481383473769, -2.91855584957864, -0.360481383473782, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926151, 0.0, 2.77494975785231, 0.112525121073828, -3.66242463677846, -0.112525121073841, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.161597224351966, 0.0, -0.91008245424515, 2.74848522989318, 1.07167967859712, -2.74848522989319, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032098, 0.0, -0.541283787356382, 2.48924832105316, 0.593319253659599, -2.48924832105318, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598802, 0.0, 0.0631592911383593, 2.06437163546044, -0.190690217737155, -2.06437163546045, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948516, 0.0, 0.811385494677781, 1.53842654527073, -1.16119753462629, -1.53842654527074, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166068, 0.0, 1.58950113154732, 0.991471497618737, -2.17047376071338, -0.991471497618751, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170862, 0.0, 2.27903723305243, 0.506781005118421, -3.06485547122329, -0.506781005118434, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.933142653722125, 0.0, 2.77494975785231, 0.158192895869802, -3.70809241157443, -0.158192895869815, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921319, 0.0, -0.91008245424515, 3.40476526616646, 0.415399642323839, -3.40476526616647, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.54234428901295, 0.0, -0.541283787356382, 3.08362807636932, -0.00106050165656013, -3.08362807636934, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.620459131948544, 0.0, 0.0631592911383594, 2.55729984081018, -0.683618423086896, -2.55729984081019, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.717155701814694, 0.0, 0.811385494677781, 1.90577020713691, -1.52854119649247, -1.90577020713692, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878815, 0.0, 1.58950113154732, 1.22821388333148, -2.40721614642613, -1.2282138833315, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200036, 0.0, 2.27903723305243, 0.627789571147594, -3.18586403725246, -0.627789571147608, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365754, 0.0, 2.77494975785231, 0.195966007513431, -3.74586552321806, -0.195966007513444, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495752, 0.0, -0.910082454245151, 3.81058632474089, 0.00957858374940557, -3.81058632474091, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.90988833753734, 0.0, -0.541283787356383, 3.45117212489371, -0.368604550180949, -3.45117212489373, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.925269022604624, 0.0, 0.0631592911383592, 2.86210973146626, -0.988428313742975, -2.86210973146627, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.94430841937361, 0.0, 0.811385494677781, 2.13292292469582, -1.75569391405138, -2.13292292469584, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973128, 0.0, 1.58950113154732, 1.3746072524258, -2.55360951552044, -1.37460725242581, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833443, 0.0, 2.27903723305243, 0.702617116781002, -3.26069158288587, -0.702617116781016, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674663, 0.0, 2.77494975785231, 0.21932360382234, -3.76922311952697, -0.219323603822353, 0.0, 0.0, 0.0}};
    
    static const double FE0_C3_D10[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.81058632474091, -0.900503870495761, 0.0, 0.0899175457548484, -0.0899175457548484, 3.71109019523667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.45117212489373, -0.909888337537349, 0.0, 0.458716212643616, -0.458716212643616, 3.36106046243108, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.86210973146627, -0.925269022604632, 0.0, 1.06315929113836, -1.06315929113836, 2.7873787540709, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.13292292469584, -0.944308419373617, 0.0, 1.81138549467778, -1.81138549467778, 2.07723134406946, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.374607252425813, -0.964108383973133, 0.0, 2.58950113154732, -2.58950113154732, 1.33871563639895, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.297382883218982, -0.981654349833449, 0.0, 3.27903723305243, -3.27903723305243, 0.684271466614468, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.780676396177643, -0.994273361674668, 0.0, 3.7749497578523, -3.7749497578523, 0.213596965497026, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.40476526616647, -0.494682811921326, 0.0, 0.0899175457548484, -0.0899175457548484, 2.8994480780878, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.08362807636934, -0.542344289012957, 0.0, 0.458716212643616, -0.458716212643616, 2.6259723653823, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.55729984081019, -0.620459131948551, 0.0, 1.06315929113836, -1.06315929113836, 2.17775897275874, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.905770207136921, -0.7171557018147, 0.0, 1.81138549467778, -1.81138549467778, 1.62292590895162, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.228213883331499, -0.81771501487882, 0.0, 2.58950113154732, -2.58950113154732, 1.04592889821032, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.372210428852389, -0.906826804200041, 0.0, 3.27903723305243, -3.27903723305243, 0.534616375347652, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.804033992486552, -0.970915765365759, 0.0, 3.7749497578523, -3.7749497578523, 0.166881772879207, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.74848522989319, 0.161597224351959, 0.0, 0.0899175457548482, -0.0899175457548482, 1.58688800554123, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.48924832105318, 0.0520354663032028, 0.0, 0.458716212643616, -0.458716212643616, 1.43721285474998, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.06437163546045, -0.127530926598808, 0.0, 1.06315929113836, -1.06315929113836, 1.19190256205926, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.538426545270743, -0.349812039948522, 0.0, 1.81138549467778, -1.81138549467778, 0.888238585219265, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00852850238124803, -0.580972629166073, 0.0, 2.58950113154732, -2.58950113154732, 0.572444126784826, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.493218994881564, -0.785818238170867, 0.0, 3.27903723305243, -3.27903723305243, 0.292599243289304, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.841807104130181, -0.93314265372213, 0.0, 3.7749497578523, -3.7749497578523, 0.0913355495919492, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.955041227122573, 0.955041227122573, 0.0, 0.0899175457548486, -0.0899175457548486, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.77064189367819, 0.77064189367819, 0.0, 0.458716212643616, -0.458716212643616, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.46842035443082, 0.468420354430821, 0.0, 1.06315929113836, -1.06315929113836, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0943072526611104, 0.0943072526611107, 0.0, 1.81138549467778, -1.81138549467778, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.294750565773661, -0.294750565773661, 0.0, 2.58950113154732, -2.58950113154732, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639518616526215, -0.639518616526215, 0.0, 3.27903723305242, -3.27903723305242, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887474878926155, -0.887474878926156, 0.0, 3.7749497578523, -3.7749497578523, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.16159722435196, 1.74848522989319, 0.0, 0.0899175457548484, -0.0899175457548484, -1.58688800554123, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0520354663032034, 1.48924832105318, 0.0, 0.458716212643616, -0.458716212643616, -1.43721285474997, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.127530926598808, 1.06437163546045, 0.0, 1.06315929113836, -1.06315929113836, -1.19190256205926, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.349812039948522, 0.538426545270743, 0.0, 1.81138549467778, -1.81138549467778, -0.888238585219265, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.580972629166073, -0.00852850238124803, 0.0, 2.58950113154732, -2.58950113154732, -0.572444126784825, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.785818238170867, -0.493218994881564, 0.0, 3.27903723305243, -3.27903723305243, -0.292599243289303, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.93314265372213, -0.841807104130182, 0.0, 3.7749497578523, -3.7749497578523, -0.0913355495919476, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.494682811921325, 2.40476526616647, 0.0, 0.0899175457548488, -0.0899175457548488, -2.8994480780878, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.542344289012956, 2.08362807636934, 0.0, 0.458716212643616, -0.458716212643616, -2.62597236538229, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.62045913194855, 1.55729984081019, 0.0, 1.06315929113836, -1.06315929113836, -2.17775897275874, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7171557018147, 0.905770207136921, 0.0, 1.81138549467778, -1.81138549467778, -1.62292590895162, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.817715014878821, 0.228213883331499, 0.0, 2.58950113154732, -2.58950113154732, -1.04592889821032, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.906826804200041, -0.37221042885239, 0.0, 3.27903723305243, -3.27903723305243, -0.534616375347651, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.970915765365759, -0.804033992486552, 0.0, 3.7749497578523, -3.7749497578523, -0.166881772879206, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.900503870495759, 2.81058632474091, 0.0, 0.089917545754849, -0.089917545754849, -3.71109019523667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.909888337537347, 2.45117212489373, 0.0, 0.458716212643616, -0.458716212643616, -3.36106046243107, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.92526902260463, 1.86210973146627, 0.0, 1.06315929113836, -1.06315929113836, -2.7873787540709, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.944308419373616, 1.13292292469584, 0.0, 1.81138549467778, -1.81138549467778, -2.07723134406945, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.964108383973134, 0.374607252425812, 0.0, 2.58950113154732, -2.58950113154732, -1.33871563639895, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.981654349833449, -0.297382883218982, 0.0, 3.27903723305243, -3.27903723305243, -0.684271466614466, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.994273361674668, -0.780676396177643, 0.0, 3.7749497578523, -3.7749497578523, -0.213596965497024, 0.0, 0.0, 0.0}};
    
    static const double FE0_C4[49][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.952646581185227, 0.0248740323760607, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.862793031223432, 0.0225279156156635, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.715527432866568, 0.0186827443488428, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.533230731173959, 0.013922895156596, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.343651813106453, 0.00897290400671669, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.175654279195255, 0.00458641254163794, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0548309009555892, 0.00143165958133301, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.851191316541618, 0.126329297019669, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.770907019092335, 0.114413927746761, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.639324960202548, 0.0948852170128629, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.47644255178423, 0.0707110745463253, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.307053470832875, 0.0455712462802949, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.156947392786903, 0.0232932989499898, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0489915018783619, 0.00727105865856031, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687121307473297, 0.29039930608799, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.622312080263295, 0.263008866575801, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.516092908865112, 0.218117268350298, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.384606636317686, 0.16254699001287, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.247867874404688, 0.104756842708482, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126695251279609, 0.0535454404572833, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0395482239674547, 0.0167143365694676, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.488760306780644, 0.488760306780644, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.442660473419548, 0.442660473419548, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.367105088607705, 0.367105088607705, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.273576813165278, 0.273576813165278, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.176312358556585, 0.176312358556585, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0901203458684462, 0.0901203458684462, 0.819759308263107},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0281312802684611, 0.0281312802684611, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29039930608799, 0.687121307473297, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.263008866575801, 0.622312080263295, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.218117268350298, 0.516092908865112, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16254699001287, 0.384606636317686, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.104756842708482, 0.247867874404688, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0535454404572833, 0.126695251279609, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0167143365694676, 0.0395482239674547, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.126329297019669, 0.851191316541618, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.114413927746761, 0.770907019092335, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0948852170128628, 0.639324960202548, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0707110745463253, 0.47644255178423, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0455712462802949, 0.307053470832875, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0232932989499898, 0.156947392786903, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00727105865856031, 0.0489915018783619, 0.943737439463078},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0248740323760608, 0.952646581185227, 0.0224793864387125},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225279156156637, 0.862793031223432, 0.114679053160904},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0186827443488428, 0.715527432866568, 0.265789822784589},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0139228951565962, 0.533230731173959, 0.452846373669445},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00897290400671674, 0.343651813106453, 0.64737528288683},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00458641254163794, 0.175654279195255, 0.819759308263108},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00143165958133301, 0.0548309009555892, 0.943737439463078}};
    
    static const double FE1[49][1] = \
    {{1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 729; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 43256906
    for (unsigned int ip = 0; ip < 49; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      
      // Total number of operations to compute function values = 2
      for (unsigned int r = 0; r < 1; r++)
      {
        F4 += FE1[ip][0]*w[0][0];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 702
      for (unsigned int r = 0; r < 27; r++)
      {
        F0 += FE0_C0_D10[ip][r]*w[1][r];
        F1 += FE0_C0_D01[ip][r]*w[1][r];
        F2 += FE0_C1_D10[ip][r]*w[1][r];
        F3 += FE0_C1_D01[ip][r]*w[1][r];
        F5 += FE0_C2[ip][r]*w[1][r];
        F6 += FE0_C2[ip][r]*w[2][r];
        F7 += FE0_C3[ip][r]*w[1][r];
        F8 += FE0_C3[ip][r]*w[2][r];
        F9 += FE0_C2_D10[ip][r]*w[1][r];
        F10 += FE0_C2_D01[ip][r]*w[1][r];
        F11 += FE0_C3_D10[ip][r]*w[1][r];
        F12 += FE0_C3_D01[ip][r]*w[1][r];
        F13 += FE0_C4[ip][r]*w[1][r];
      } // end loop over 'r'
      
      // Number of operations for primary indices: 882090
      for (unsigned int j = 0; j < 27; j++)
      {
        for (unsigned int k = 0; k < 27; k++)
        {
          // Number of operations to compute entry: 1210
          A[j*27 + k] += (((((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*F13 + FE0_C4[ip][k]*(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(((((K[0]*FE0_C2_D10[ip][j] + K[2]*FE0_C2_D01[ip][j]))*(((K[1]*F2 + K[3]*F3) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))) + ((K[0]*FE0_C3_D10[ip][j] + K[2]*FE0_C3_D01[ip][j]))*((-1.0)*((K[1]*F0 + K[3]*F1))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))) + (((K[1]*FE0_C2_D10[ip][j] + K[3]*FE0_C2_D01[ip][j]))*((-1.0)*((K[0]*F2 + K[2]*F3))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))) + ((K[1]*FE0_C3_D10[ip][j] + K[3]*FE0_C3_D01[ip][j]))*(((K[0]*F0 + K[2]*F1) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))))) + (((((K[0]*FE0_C2_D10[ip][j] + K[2]*FE0_C2_D01[ip][j]))*(((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*(((K[1]*F2 + K[3]*F3) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + (K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))) + ((K[0]*FE0_C3_D10[ip][j] + K[2]*FE0_C3_D01[ip][j]))*(((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*((-1.0)*((K[1]*F0 + K[3]*F1))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))) + (((K[1]*FE0_C2_D10[ip][j] + K[3]*FE0_C2_D01[ip][j]))*(((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*((-1.0)*((K[0]*F2 + K[2]*F3))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + ((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))) + ((K[1]*FE0_C3_D10[ip][j] + K[3]*FE0_C3_D01[ip][j]))*(((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*(((K[0]*F0 + K[2]*F1) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + (K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))))*(F13*(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))))*(-1.0) + (((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*1000.0/(F4))*((FE0_C2[ip][j]*(((-1.0)*F6 + F5)) + FE0_C3[ip][j]*(((-1.0)*F8 + F7)))) + ((FE0_C2[ip][j]*FE0_C2[ip][k] + FE0_C3[ip][j]*FE0_C3[ip][k]))*((((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))*1000.0/(F4))) + FE0_C4[ip][j]*(((((((((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*(((K[0]*F0 + K[2]*F1) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + (K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))*((K[1]*F11 + K[3]*F12)) + ((K[1]*FE0_C3_D10[ip][k] + K[3]*FE0_C3_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))) + ((((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*((-1.0)*((K[0]*F2 + K[2]*F3))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + ((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*(-1.0))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))*((K[1]*F9 + K[3]*F10)) + ((K[1]*FE0_C2_D10[ip][k] + K[3]*FE0_C2_D01[ip][k]))*((-1.0)*((K[0]*F2 + K[2]*F3))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))) + (((((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*(((K[1]*F2 + K[3]*F3) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + (K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))*((K[0]*F9 + K[2]*F10)) + ((K[0]*FE0_C2_D10[ip][k] + K[2]*FE0_C2_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))) + ((((((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*((-1.0)*((K[1]*F0 + K[3]*F1))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))*(-1.0) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*(-1.0))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))*((K[0]*F11 + K[2]*F12)) + ((K[0]*FE0_C3_D10[ip][k] + K[2]*FE0_C3_D01[ip][k]))*((-1.0)*((K[1]*F0 + K[3]*F1))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))))))*(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))) + ((((((K[0]*FE0_C1_D10[ip][k] + K[2]*FE0_C1_D01[ip][k]))*((K[1]*F0 + K[3]*F1)) + ((K[1]*FE0_C0_D10[ip][k] + K[3]*FE0_C0_D01[ip][k]))*((K[0]*F2 + K[2]*F3))))*(-1.0) + (((K[0]*FE0_C0_D10[ip][k] + K[2]*FE0_C0_D01[ip][k]))*(((K[1]*F2 + K[3]*F3) + 1.0)) + ((K[1]*FE0_C1_D10[ip][k] + K[3]*FE0_C1_D01[ip][k]))*(((K[0]*F0 + K[2]*F1) + 1.0)))))*(((((K[0]*F11 + K[2]*F12))*((-1.0)*((K[1]*F0 + K[3]*F1))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))) + ((K[0]*F9 + K[2]*F10))*(((K[1]*F2 + K[3]*F3) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3))))))) + (((K[1]*F11 + K[3]*F12))*(((K[0]*F0 + K[2]*F1) + 1.0)/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))) + ((K[1]*F9 + K[3]*F10))*((-1.0)*((K[0]*F2 + K[2]*F3))/(((((K[0]*F0 + K[2]*F1) + 1.0))*(((K[1]*F2 + K[3]*F3) + 1.0)) + (-1.0)*(((K[1]*F0 + K[3]*F1))*((K[0]*F2 + K[2]*F3)))))))))))))*W49[ip]*det;
        } // end loop over 'k'
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_interior_facet_integral_0_5: public ufc::interior_facet_integral
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_interior_facet_integral_0_5() : ufc::interior_facet_integral()
  {
    
  }

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_interior_facet_integral_0_5() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, false, false});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // Compute Jacobian
    double J_0[4];
    compute_jacobian_triangle_2d(J_0, coordinate_dofs_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[4];
    double detJ_0;
    compute_jacobian_inverse_triangle_2d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[4];
    compute_jacobian_triangle_2d(J_1, coordinate_dofs_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[4];
    double detJ_1;
    compute_jacobian_inverse_triangle_2d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet_0][0];
    const unsigned int v1 = edge_vertices[facet_0][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = coordinate_dofs_0[2*v1 + 0] - coordinate_dofs_0[2*v0 + 0];
    const double dx1 = coordinate_dofs_0[2*v1 + 1] - coordinate_dofs_0[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    const bool direction = dx1*(coordinate_dofs_0[2*facet_0] - coordinate_dofs_0[2*v0]) - dx0*(coordinate_dofs_0[2*facet_0 + 1] - coordinate_dofs_0[2*v0 + 1]) < 0;
    // Compute facet normals from the facet scale factor constants
    const double n_00 = direction ? dx1 / det : -dx1 / det;
    const double n_01 = direction ? -dx0 / det : dx0 / det;// Compute facet normals from the facet scale factor constants
    
    // Facet area
    
    // Compute cell volume
    // Compute cell volume
    
    
    // Compute circumradius of triangle in 2D
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.277777777777778, 0.444444444444444, 0.277777777777778};
    // Quadrature points on the UFC reference element: (0.112701665379258), (0.5), (0.887298334620742)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0_C0[3][27] = \
    {{0.0, 0.687298334620742, -0.0872983346207417, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, -0.0872983346207417, 0.687298334620742, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C1[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, -0.0872983346207417, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207417, 0.687298334620742, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C2[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, -0.0872983346207417, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207417, 0.687298334620742, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C3[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, -0.0872983346207417, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207417, 0.687298334620742, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C4[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887298334620742, 0.112701665379258},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.112701665379258, 0.887298334620742}};
    
    static const double FE0_f1_C0[3][27] = \
    {{0.687298334620742, 0.0, -0.0872983346207417, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0872983346207416, 0.0, 0.687298334620742, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C1[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, 0.0, -0.0872983346207417, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207416, 0.0, 0.687298334620742, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C2[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, 0.0, -0.0872983346207417, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207416, 0.0, 0.687298334620742, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C3[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, 0.0, -0.0872983346207417, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207416, 0.0, 0.687298334620742, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C4[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887298334620742, 0.0, 0.112701665379258},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.112701665379258, 0.0, 0.887298334620742}};
    
    static const double FE0_f2_C0[3][27] = \
    {{0.687298334620742, -0.0872983346207416, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.0872983346207416, 0.687298334620742, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C1[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, -0.0872983346207416, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207416, 0.687298334620742, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C2[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, -0.0872983346207416, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207416, 0.687298334620742, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C3[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.687298334620742, -0.0872983346207416, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0872983346207416, 0.687298334620742, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C4[3][27] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.887298334620742, 0.112701665379258, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.112701665379258, 0.887298334620742, 0.0}};
    
    static const double FE1_f0[3][1] = \
    {{1.0},
    {1.0},
    {1.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 2916; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f0_C4[ip][j]*((((FE0_f0_C0[ip][k]/(F0)*(-1.0) + FE0_f0_C2[ip][k]))*n_00 + ((FE0_f0_C1[ip][k]/(F0)*(-1.0) + FE0_f0_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f0_C4[ip][j]*((((FE0_f0_C0[ip][k]/(F0)*(-1.0) + FE0_f0_C2[ip][k]))*n_00 + ((FE0_f0_C1[ip][k]/(F0)*(-1.0) + FE0_f0_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f0_C4[ip][j]*((((FE0_f0_C0[ip][k]/(F0)*(-1.0) + FE0_f0_C2[ip][k]))*n_00 + ((FE0_f0_C1[ip][k]/(F0)*(-1.0) + FE0_f0_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f1_C4[ip][j]*((((FE0_f1_C0[ip][k]/(F0)*(-1.0) + FE0_f1_C2[ip][k]))*n_00 + ((FE0_f1_C1[ip][k]/(F0)*(-1.0) + FE0_f1_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f1_C4[ip][j]*((((FE0_f1_C0[ip][k]/(F0)*(-1.0) + FE0_f1_C2[ip][k]))*n_00 + ((FE0_f1_C1[ip][k]/(F0)*(-1.0) + FE0_f1_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f1_C4[ip][j]*((((FE0_f1_C0[ip][k]/(F0)*(-1.0) + FE0_f1_C2[ip][k]))*n_00 + ((FE0_f1_C1[ip][k]/(F0)*(-1.0) + FE0_f1_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f2_C4[ip][j]*((((FE0_f2_C0[ip][k]/(F0)*(-1.0) + FE0_f2_C2[ip][k]))*n_00 + ((FE0_f2_C1[ip][k]/(F0)*(-1.0) + FE0_f2_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f2_C4[ip][j]*((((FE0_f2_C0[ip][k]/(F0)*(-1.0) + FE0_f2_C2[ip][k]))*n_00 + ((FE0_f2_C1[ip][k]/(F0)*(-1.0) + FE0_f2_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 24063
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 24063
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE1_f0[ip][0]*w[0][0];
          } // end loop over 'r'
          
          // Number of operations for primary indices: 8019
          for (unsigned int j = 0; j < 27; j++)
          {
            for (unsigned int k = 0; k < 27; k++)
            {
              // Number of operations to compute entry: 11
              A[j*54 + k] += FE0_f2_C4[ip][j]*((((FE0_f2_C0[ip][k]/(F0)*(-1.0) + FE0_f2_C2[ip][k]))*n_00 + ((FE0_f2_C1[ip][k]/(F0)*(-1.0) + FE0_f2_C3[ip][k]))*n_01))*W3[ip]*det;
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};


class ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0: public ufc::form
{
public:

  ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0();

  ~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0() override;

  const char * signature() const final override;

  std::size_t rank() const final override;

  std::size_t num_coefficients() const final override;

  std::size_t original_coefficient_position(std::size_t i) const final override;

  ufc::finite_element * create_coordinate_finite_element() const final override;

  ufc::dofmap * create_coordinate_dofmap() const final override;

  ufc::coordinate_mapping * create_coordinate_mapping() const final override;

  ufc::finite_element * create_finite_element(std::size_t i) const final override;

  ufc::dofmap * create_dofmap(std::size_t i) const final override;

  std::size_t max_cell_subdomain_id() const final override;

  std::size_t max_exterior_facet_subdomain_id() const final override;

  std::size_t max_interior_facet_subdomain_id() const final override;

  std::size_t max_vertex_subdomain_id() const final override;

  std::size_t max_custom_subdomain_id() const final override;

  std::size_t max_cutcell_subdomain_id() const final override;

  std::size_t max_interface_subdomain_id() const final override;

  std::size_t max_overlap_subdomain_id() const final override;

  bool has_cell_integrals() const final override;

  bool has_exterior_facet_integrals() const final override;

  bool has_interior_facet_integrals() const final override;

  bool has_vertex_integrals() const final override;

  bool has_custom_integrals() const final override;

  bool has_cutcell_integrals() const final override;

  bool has_interface_integrals() const final override;

  bool has_overlap_integrals() const final override;

  ufc::cell_integral * create_cell_integral(std::size_t i) const final override;

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t i) const final override;

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t i) const final override;

  ufc::vertex_integral * create_vertex_integral(std::size_t i) const final override;

  ufc::custom_integral * create_custom_integral(std::size_t i) const final override;

  ufc::cutcell_integral * create_cutcell_integral(std::size_t i) const final override;

  ufc::interface_integral * create_interface_integral(std::size_t i) const final override;

  ufc::overlap_integral * create_overlap_integral(std::size_t i) const final override;

  ufc::cell_integral * create_default_cell_integral() const final override;

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override;

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override;

  ufc::vertex_integral * create_default_vertex_integral() const final override;

  ufc::custom_integral * create_default_custom_integral() const final override;

  ufc::cutcell_integral * create_default_cutcell_integral() const final override;

  ufc::interface_integral * create_default_interface_integral() const final override;

  ufc::overlap_integral * create_default_overlap_integral() const final override;

};

extern "C" DLL_EXPORT ufc::form * create_ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0()
{
  return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0();
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0() : ufc::form()
{
    // Do nothing
}

ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::~ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0()
{
    // Do nothing
}

const char * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::signature() const
{
    return "ab0f325ed9e16a2154e9413fafc410cdc63df77dd50bca77764143c432de816d46decd5b44f107b1506bdeb6656d7a3a1c7910170cf302cf2fa507fb817162e5";
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::rank() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::num_coefficients() const
{
    return 3;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::original_coefficient_position(std::size_t i) const
{
    static const std::vector<std::size_t> position({0, 1, 2});
    return position[i];
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_coordinate_finite_element() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_1();
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_coordinate_dofmap() const
{
    return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_1();
}

ufc::coordinate_mapping * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_coordinate_mapping() const
{
    return nullptr;
}

ufc::finite_element * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();
        break;
      }
    case 2:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_5();
        break;
      }
    case 3:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();
        break;
      }
    case 4:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_finite_element_4();
        break;
      }
    }
    
    return 0;
}

ufc::dofmap * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();
        break;
      }
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();
        break;
      }
    case 2:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_5();
        break;
      }
    case 3:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();
        break;
      }
    case 4:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_dofmap_4();
        break;
      }
    }
    
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_cell_subdomain_id() const
{
    return 2;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_interior_facet_subdomain_id() const
{
    return 6;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_cell_integrals() const
{
    return true;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_interior_facet_integrals() const
{
    return true;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_custom_integrals() const
{
    return false;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_interface_integrals() const
{
    return false;
}

bool ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 1:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_cell_integral_0_1();
        break;
      }
    }
    
    return 0;
}

ufc::exterior_facet_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    switch (subdomain_id)
    {
    case 5:
      {
        return new ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_interior_facet_integral_0_5();
        break;
      }
    }
    
    return 0;
}

ufc::vertex_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::custom_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::interface_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::overlap_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return 0;
}

ufc::cell_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_cell_integral() const
{
    return 0;
}

ufc::exterior_facet_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

ufc::interior_facet_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

ufc::vertex_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_vertex_integral() const
{
    return 0;
}

ufc::custom_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_custom_integral() const
{
    return 0;
}

ufc::cutcell_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_cutcell_integral() const
{
    return 0;
}

ufc::interface_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_interface_integral() const
{
    return 0;
}

ufc::overlap_integral * ffc_form_9606004cb983be1a9d3b8edb030f4f6957bbaf9f_form_0::create_default_overlap_integral() const
{
    return 0;
}

